// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: capture_agent.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CaptureAgent_SendControlCommand_FullMethodName = "/router_agent.CaptureAgent/SendControlCommand"
	CaptureAgent_StreamPackets_FullMethodName      = "/router_agent.CaptureAgent/StreamPackets"
)

// CaptureAgentClient is the client API for CaptureAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC 服务定义
type CaptureAgentClient interface {
	// PC端发送控制指令给路由器代理
	// 这个RPC方法允许PC端发送一系列控制指令，并接收相应的响应。
	// 这是一个双向流，但在这个场景下，更常见的模式可能是客户端发送单个请求，服务器回复单个响应，
	// 或者客户端流式发送请求，服务器流式回复响应。
	// 为了简化初始实现，我们先定义一个单向流从PC到Agent的控制，Agent回复状态。
	// 或者，更直接的是一个请求/响应模式的控制。
	// 考虑到启动/停止是主要控制，一个请求/响应可能更简单。
	// 但如果未来有更复杂的连续控制，流可能更好。
	// 我们先用一个简单的RPC处理控制命令。
	SendControlCommand(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*ControlResponse, error)
	// 路由器代理向PC端流式发送抓包数据
	// PC端调用此方法，并提供一个ControlRequest（主要是为了指定interface和可能的初始过滤器）。
	// 代理在收到此请求后，如果ControlRequest指示启动（或通过SendControlCommand已启动），
	// 则开始通过这个流发送数据。
	StreamPackets(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CaptureData], error)
}

type captureAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptureAgentClient(cc grpc.ClientConnInterface) CaptureAgentClient {
	return &captureAgentClient{cc}
}

func (c *captureAgentClient) SendControlCommand(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*ControlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ControlResponse)
	err := c.cc.Invoke(ctx, CaptureAgent_SendControlCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captureAgentClient) StreamPackets(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CaptureData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CaptureAgent_ServiceDesc.Streams[0], CaptureAgent_StreamPackets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ControlRequest, CaptureData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CaptureAgent_StreamPacketsClient = grpc.ServerStreamingClient[CaptureData]

// CaptureAgentServer is the server API for CaptureAgent service.
// All implementations must embed UnimplementedCaptureAgentServer
// for forward compatibility.
//
// gRPC 服务定义
type CaptureAgentServer interface {
	// PC端发送控制指令给路由器代理
	// 这个RPC方法允许PC端发送一系列控制指令，并接收相应的响应。
	// 这是一个双向流，但在这个场景下，更常见的模式可能是客户端发送单个请求，服务器回复单个响应，
	// 或者客户端流式发送请求，服务器流式回复响应。
	// 为了简化初始实现，我们先定义一个单向流从PC到Agent的控制，Agent回复状态。
	// 或者，更直接的是一个请求/响应模式的控制。
	// 考虑到启动/停止是主要控制，一个请求/响应可能更简单。
	// 但如果未来有更复杂的连续控制，流可能更好。
	// 我们先用一个简单的RPC处理控制命令。
	SendControlCommand(context.Context, *ControlRequest) (*ControlResponse, error)
	// 路由器代理向PC端流式发送抓包数据
	// PC端调用此方法，并提供一个ControlRequest（主要是为了指定interface和可能的初始过滤器）。
	// 代理在收到此请求后，如果ControlRequest指示启动（或通过SendControlCommand已启动），
	// 则开始通过这个流发送数据。
	StreamPackets(*ControlRequest, grpc.ServerStreamingServer[CaptureData]) error
	mustEmbedUnimplementedCaptureAgentServer()
}

// UnimplementedCaptureAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCaptureAgentServer struct{}

func (UnimplementedCaptureAgentServer) SendControlCommand(context.Context, *ControlRequest) (*ControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendControlCommand not implemented")
}
func (UnimplementedCaptureAgentServer) StreamPackets(*ControlRequest, grpc.ServerStreamingServer[CaptureData]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPackets not implemented")
}
func (UnimplementedCaptureAgentServer) mustEmbedUnimplementedCaptureAgentServer() {}
func (UnimplementedCaptureAgentServer) testEmbeddedByValue()                      {}

// UnsafeCaptureAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptureAgentServer will
// result in compilation errors.
type UnsafeCaptureAgentServer interface {
	mustEmbedUnimplementedCaptureAgentServer()
}

func RegisterCaptureAgentServer(s grpc.ServiceRegistrar, srv CaptureAgentServer) {
	// If the following call pancis, it indicates UnimplementedCaptureAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CaptureAgent_ServiceDesc, srv)
}

func _CaptureAgent_SendControlCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureAgentServer).SendControlCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptureAgent_SendControlCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureAgentServer).SendControlCommand(ctx, req.(*ControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaptureAgent_StreamPackets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ControlRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaptureAgentServer).StreamPackets(m, &grpc.GenericServerStream[ControlRequest, CaptureData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CaptureAgent_StreamPacketsServer = grpc.ServerStreamingServer[CaptureData]

// CaptureAgent_ServiceDesc is the grpc.ServiceDesc for CaptureAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaptureAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "router_agent.CaptureAgent",
	HandlerType: (*CaptureAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendControlCommand",
			Handler:    _CaptureAgent_SendControlCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPackets",
			Handler:       _CaptureAgent_StreamPackets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "capture_agent.proto",
}
