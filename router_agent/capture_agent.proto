syntax = "proto3";

package router_agent;

option go_package = ".;main";

// 控制指令类型
enum ControlCommandType {
  UNKNOWN_COMMAND = 0;
  START_CAPTURE = 1;
  STOP_CAPTURE = 2;
  SET_CHANNEL = 3; // 未来使用
  SET_BANDWIDTH = 4; // 未来使用
}

// 控制指令消息
message ControlRequest {
  ControlCommandType command_type = 1;
  string interface_name = 2; // e.g., "ath1"
  int32 channel = 3;         // e.g., 1, 6, 11, 36, 149
  string bandwidth = 4;      // e.g., "HT20", "HT40", "VHT80"
  string bpf_filter = 5;     // BPF filter string for tcpdump
}

// 控制指令响应
message ControlResponse {
  bool success = 1;
  string message = 2;
}

// 抓包数据消息
message CaptureData {
  bytes frame = 1; // 原始帧数据 (包含Radiotap)
}

// gRPC 服务定义
service CaptureAgent {
  // PC端发送控制指令给路由器代理
  // 这个RPC方法允许PC端发送一系列控制指令，并接收相应的响应。
  // 这是一个双向流，但在这个场景下，更常见的模式可能是客户端发送单个请求，服务器回复单个响应，
  // 或者客户端流式发送请求，服务器流式回复响应。
  // 为了简化初始实现，我们先定义一个单向流从PC到Agent的控制，Agent回复状态。
  // 或者，更直接的是一个请求/响应模式的控制。
  // 考虑到启动/停止是主要控制，一个请求/响应可能更简单。
  // 但如果未来有更复杂的连续控制，流可能更好。
  // 我们先用一个简单的RPC处理控制命令。
  rpc SendControlCommand(ControlRequest) returns (ControlResponse);

  // 路由器代理向PC端流式发送抓包数据
  // PC端调用此方法，并提供一个ControlRequest（主要是为了指定interface和可能的初始过滤器）。
  // 代理在收到此请求后，如果ControlRequest指示启动（或通过SendControlCommand已启动），
  // 则开始通过这个流发送数据。
  rpc StreamPackets(ControlRequest) returns (stream CaptureData);
}